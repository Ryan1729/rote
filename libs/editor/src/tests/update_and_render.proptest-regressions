# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 2f3d5d7abc35c42060af6121dbaf48cc8fd94edb603132a4a096f1044101fa87 # shrinks to state = State { buffers: EditorBuffers { buffers: SelectableVec1 { elements: Vec1([EditorBuffer { text_buffer: TextBuffer { rope: ["ðŸŒ€"], cursors: Cursors { cursors: Vec1([cur!{l 0 o 1 sticky_offset: CharOffset(0),}]) }, history: [], history_index: 0, unedited: [], scroll: slxy!(0, 0) }, search_results: SearchResults { needle: "", ranges: [(pos!{l 0 o 0}, pos!{l 0 o 80894094724419})], current_range: 0 }, .. d!: () }]), index_state: State { current: 613779622, invalidation: MovedTo(0, 0) }, current_index: Index { generation: 613779622, index: 0 } }, last_non_rope_hash: 17934914999081058617, .. d!: () }, parsers: Initialized(InitializedParsers { parser_map: "TODO parser_map: Debug", rust_basic_query: Query { ptr: 0x7f344419f320, capture_names: ["comment", "string"], text_predicates: [[], [], [], []], property_settings: [[], [], [], []], property_predicates: [[], [], [], []], general_predicates: [[], [], [], []] }, rust_lang: Language(0x5644d99d93c0) }), view: View { buffers: SelectableVec1 { elements: Vec1([BufferView { name_string: "*scratch 0*", data: BufferViewData { chars: ["ðŸŒ€"], cursors: [CursorView { position: pos!{l 0 o 1}, state: _ }], highlights: [Highlight { min: pos!{l 0 o 0}, max: pos!{l 0 o 80894094724419}, kind: CurrentResult }], spans: [SpanView { end_byte_index: 4, kind: SpanKind(0) }], .. d!: () }, .. d!: () }]), index_state: State { current: 613779622, invalidation: MovedTo(0, 0) }, current_index: Index { generation: 613779622, index: 0 } }, menu: None, status_line: StatusLineView { chars: "1/1 N(txt)  ? t(0, 0) s(0, 0) c 0:1(0) (0, 0) (3|4)," }, current_buffer_kind: Text, edited_transitions: EditedTransitions([]), stats: ViewStats { latest_render_duration: 0ns } }, .. d!: () }, inputs = [NextLanguage, SetCursor(tbsxy!(1145868901.08979127858765423, 812184193.07755859731696546), Add), Cut, CloseBuffer(Index { generation: 542558679, index: 7 }), TabIn, SetMenuMode(Hidden), Undo, Delete, Redo, DeleteLines, Cut, SelectCharTypeGrouping(tbsxy!(-135667381.5168384555727243, 908634525.6051329053007066), Replace), DeleteLines, SetMenuMode(GoToPosition)]
cc 4d85f8ff99d5e4bb4f0e68a03b033889cb17b3cda5c3bbc93c97125c7389388d # shrinks to inputs = [Delete, NextLanguage, Undo]
cc ab09a5e4a5b7c60f3de00aa4bd5ab43715b41961e362dee808b2821be9ae1b99 # shrinks to buffers = EditorBuffers { buffers: SelectableVec1 { elements: Vec1([EditorBuffer { name: Scratch(1), search_results: SearchResults { ranges: [(pos!{l 0 o 0}, pos!{l 0 o 0})], .. d!: () }, .. d!: () }]), index_state: State { current: 0, invalidation: RemovedAt(0) }, current_index: Index { generation: 0, index: 0 } }, .. d!: () }, inputs = [Paste(Some("")), NextLanguage]
cc a206ad9a3a17fdaa678da5989c6fc69b132b1a96d1c435a746c4fefb4025e329 # shrinks to inputs = [AddOrSelectBuffer(Scratch(0), "0"), Delete, TabOut]
cc 9db146d4d8e4768da84ef99e505b97945eeda4b2d1d2f66a3daa5b4122229c59 # shrinks to input1 = AddOrSelectBuffer(Scratch(1), ""), state = State { current: 0, invalidation: RemovedAt(0) }
cc ea8a8b391f81130b49b8f918a6a746e4b36e2f74f8f429222d680fb2e08efcfb # shrinks to inputs = [NextLanguage, Delete]
cc 559f42ca3b1cb408a01c1934b0a6f249d5aaa790b9b33b5a84aeab0fbd36bb64 # shrinks to inputs = [Insert('Â¡'), TabOut]
